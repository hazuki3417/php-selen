name: Testing

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - src/**/*.php
      - tests/**/*.php

jobs:
  provision:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: verify composer.json
      run: docker compose run --rm composer validate

    - name: install package
      run: docker compose run --rm composer install

    - name: composer cache or restore
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

  inspect:
    runs-on: ubuntu-latest
    needs: provision

    strategy:
      matrix:
        task: [
          'code',
          'code-style',
          'namespace',
        ]

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: composer cache or restore
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: inspect
      run: docker compose run --rm inspect-${{ matrix.task }}



  test:
    runs-on: ubuntu-latest
    needs: inspect

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: composer cache or restore
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: test
      run: docker compose run --rm test

  generate-api-coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: composer cache or restore
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: generate
      run: docker compose run --rm gen-code-coverage

    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: docs/coverage

  generate-api-document:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: composer cache or restore
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: generate
      run: docker compose run --rm gen-code-document

    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: document
        path: docs/phpdoc

  upload-api-coverage:
    runs-on: ubuntu-latest
    needs: generate-api-coverage

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: download artifact documents
      uses: actions/download-artifact@v4
      with:
        name: coverage
        path: docs/coverage

    # [Reference]
    # https://github.com/aws-actions/configure-aws-credentials
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{secrets.AWS_CLI_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_CLI_SECRET_ACCESS_KEY}}
        aws-region: ap-northeast-1

    - name: upload
      env:
        S3_BUCKET_NAME: ${{secrets.AWS_S3_BUCKET_NAME}}
      run: |
        aws s3 sync ./docs/coverage s3://$S3_BUCKET_NAME/coverage

  upload-api-document:
    runs-on: ubuntu-latest
    needs: generate-api-document

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: download artifact documents
      uses: actions/download-artifact@v4
      with:
        name: document
        path: docs/phpdoc

    # [Reference]
    # https://github.com/aws-actions/configure-aws-credentials
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{secrets.AWS_CLI_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_CLI_SECRET_ACCESS_KEY}}
        aws-region: ap-northeast-1

    - name: upload
      env:
        S3_BUCKET_NAME: ${{secrets.AWS_S3_BUCKET_NAME}}
      run: |
        aws s3 sync ./docs/phpdoc s3://$S3_BUCKET_NAME/phpdoc
